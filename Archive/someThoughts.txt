some thoughts
---
Tuesday, Nov 7, 2017

Today I blended gedit and tiny-c together, thus producing a single environment for coding and testing, like the old pps. This blend has the advantage of being wysiwyg, plus a full featured modern editor. Having achieved this raises questions. Why do the pps at all? Who would use it? Probably nobody.

Another near accomplishment is the 2/3'rds finished Classical library. That work's main help to me was the debugging of the interpreter, which is now pretty solid. So it has not been wasted effort. But why finish? Who will use it? Certainly it is of no pedagogical value today. Its 1977 motivation was the foundation for the pps. And the functions lean towards manipulation memory blocks, not strings, with a handful of exceptions (ps, pl, etc.)

And working side-by-side with both C and tiny-c syntax has suggested to me that the lazy syntax of tiny-c, a virtue in '77-78 with my pre-teen kids, would likely make the transition to the more rigourous syntax of C difficult for some students.

So just what are my goals? Its not so much consulting that I need as just someone to rap with, or maybe a small group.

Tom Gibson

