// cairoGraphicsLib.tc
// Define draw codes, init icode. 
// start, show must be first,last respectively

char _cgdrawname(50) //users name for drawing, no spaces
char _cgfilename(55) // file passing draw vector to cairoGraphics
char _cgcmd(70) // system command to start cairoGraphics
int unit
char NL, QUOTE
// recent points are remembered
int lastmoveto(1), lastlineto(1), _have_previous_lineto

start 
    char name(0)
    int a1,a2 
[
  _cgdrawname = name
  strcpy _cgfilename,_cgdrawname
  strcat _cgfilename,".draw"
  strcpy _cgcmd, "python cairopy.py "
  strcat _cgcmd, _cgdrawname
  NL=10
  QUOTE=34
//  _drawing_under_way = 0
  unit = fopen _cgfilename, "w"
  if(unit<0)
  [
    printf "Cannot open %s for writing, err %d", _cgfilename, unit
    exit
  ]
  cs "window"; ci a1; ci a2; nl
]

showapp char r(0) [
  cs "showapp "; cs r; nl
]

show [
  cs "show"; nl
  fclose unit
  system _cgcmd
]

// shorthand puts to the file
cs char s(0)[fputs s,unit]
ci int x    [fpn x,unit]
cc char x   [fputc x,unit]
nl          [fputc 10,unit]

// actual draw tools...
arc int a1,a2,a3,a4,a5 [
  cs "arc"; ci a1; ci a2; ci a3; ci a4; ci a5; nl
]
arcneg int a1,a2,a3,a4,a5 [
  cs "arc_negative"; ci a1; ci a2; ci a3; ci a4; ci a5; nl
]
dot int x,y[
  moveto x,y; 
  lineto x+1,y+1
]
ellipse int a1,a2,a3,a4 [
  cs "save";nl
  cs "translate";ci a1+a3/2;ci a2+a4/2;nl
  cs "scale";ci a3/2;ci a4/2;nl
  cs "arc"; ci 0; ci 0; ci 1; ci 0; ci 360;nl
  cs "restore";nl
]
fill[
  cs "fill";nl
]
lineto int a1,a2 [
  cs "line_to";ci a1; ci a2; nl
  if(_have_previous_lineto)[
    lastmoveto(0)=lastlineto(0)
    lastmoveto(1)=lastlineto(1)
  ]
  lastlineto(0)=a1
  lastlineto(1)=a2
  _have_previous_lineto=1
]
moveto int a1,a2 [
  cs "move_to";ci a1; ci a2; nl
  lastmoveto(0)=a1
  lastmoveto(1)=a2
  _have_previous_lineto = 0
]
next [
  cs "new_sub_path"; nl
  lastmoveto(0)=0
  lastmoveto(1)=0
  lastlineto(0)=0
  lastlineto(1)=0
]
rectangle int a1,a2,a3,a4 [
  cs "rectangle";ci a1; ci a2; ci a3; ci a4; nl
]
raster int w,h,d [
    int row,col
    row=d
    while(row<h) [
        col=d
        while(col<w)[
            dot row,col
            col=col+d
        ]
        row=row+d
    ]
]
setdash int d, off [
  cs "set_dash";ci d; ci off; nl
]
setdash2 int d1,d2,off [
  cs "set_dash";ci d1; ci d2; ci off; nl
]
setfontsize int x [
  cs "set_font_size"; ci x; nl
]
setrgb int r,g,b [
  cs "setrgb"; ci r;ci g;ci b; nl
]
showtext char t(0)[
  cs "showtext "; cc QUOTE; cs t; cc QUOTE; nl
]
stroke[
  cs "stroke"; nl
]
// intersection of two lines
// args: answer, line a, line b
// returns: -1 for parallel lines, 0 for OK
xersect int ix(1), ax0,ay0,ax1,ay1, bx0,by0,bx1,by1 
[
int xdb;xdb = 1
          if(xdb)pl"line a ="; pn ax0;pn ay0;pn ax1;pn ay1
          if(xdb)pl"line b ="; pn bx0;pn by0;pn bx1;pn by1
    int day,dax,dby,dbx,f,e,h,g,y,x,avert,bvert
    dax = ax1-ax0
    day = ay1-ay0
    dbx = bx1-bx0
    dby = by1-by0
        if(xdb)pl"dax,day,dbx,dby";pn dax;pn day;pn dbx;pn dby
    if(dax==0) [  // line a is vertical
      if(dbx==0) return -1  // parallel
      x = ax0
      avert=1
          if(xdb)pl"x ="; pn x
    ]
    else [
      f = day*1000/dax        //slope
      e = ay0 - f*ax0/1000    // y=0 intersept
          if(xdb)pl"e f ="; pn e;pn f
    ]
    if(dbx==0) [  // line b is vertical
      x = bx0
      bvert=1
          if(xdb)pl"x ="; pn x
    ]
    else [
      h = dby*1000/dbx
      g = by0 - h*bx0/1000
          if(xdb)pl"g h ="; pn g;pn h
    ]

    if(h==f)return -1;
    if( 0==(avert+bvert) ) x = ((e-g)*1000)/(h-f)
          if(xdb)pl"x ="; pn x

    if( 0==bvert ) y = g + h*x/1000
    else y = e + f*x/1000
          if(xdb)pl"bvert y ="; pn bvert;pn y

    ix(0) = x
    ix(1) = y
    return 0
]
