[
View an array as a matrix. The array size must be at least 2+rows+cols.
The first two cells capture the dimensions, thus making the array self
defining. 
ISSUE: x,y vs r,c. 
]

mat_setup int rows, cols, mat(0) [
	mat(0) = rows
	mat(1) = cols
]
// returns true if either x or y are invalid
mat_bad int x,y,mat(0) [
	if(x<0) return 1
	if(x>=mat(0)) return 1
	if(y<0) return 1
	if(y>=mat(1)) return 1
	return 0
]
// returns index into array of cell x,y, else -1 if invalid
mat_cell int x,y,mat(0) [
	if(mat_bad(x,y,mat))return -1
	return 2+x+y*mat(0)
]
// return value of mat(x,y), else huge negative
mat_val int x,y,mat(0) [
	if(mat_bad(x,y,mat))return -999999;
	return mat(2+y+x*mat(1))
]
// return value of mat(x,y), else huge negative
mat_set int x,y,mat [
	if(mat_bad(x,y,mat))return -999999;
	return 
]
mat_print int mat(0)[
	ps"in mat_print"
	int rows,cols,r,c

	rows=mat(0); cols=mat(1)
	while(r<rows)[
		if(r)ps " |"
		while(c<cols)[ 
//			pn mat(2+c+r*cols)
			pn mat_val(r,c,mat)
			c=c+1
		]
		r=r+1
		c=0
	]
]

int m(14)  // 2+rows*cols
mat_test1 [
	int i
	while(i<12)[
		m(i+2)=i
		i=i+1
	]
	int rows, cols
	rows=3; cols=4
	mat_setup rows, cols, m

	mat_print m
]

main[
	mat_test1
]
