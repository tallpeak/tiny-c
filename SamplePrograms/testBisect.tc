#include pps/lineLib.tc
#include pps/mathLib.tc
#include pps/library.tc
#include pps/pyGraphicsLib.tc

// NOTE TO READER: several main/seed/test functions. Some renamed with 
// leading x. Do a specific test by removing the x (or y or z) from 
// one main, commenting out the DO EVERYTHING main at the end.
// Further select the actual test(s) of interest 
// by covering test calls with comment flag.


// x TESTS FOR parallel (just main, no seed or test fcn)
xmain[
	int sega(3), segb(3)
	ps"parallel test"
	pn _parallel(20,20,60,00,20,50,60,30)  // parallel and slope
	pn _parallel(20,20,60,00,20,50,60,29)  // not by one pixel
	pn _parallel(20,20,60,00,20,50,60,31)  // ditto
	pn _parallel(1,1,1,5,2,1,2,5)  // both vert
	pn _parallel(1,1,1,5,2,1,12,5) // a vert
	pn _parallel(1,1,2,5,2,1,2,5)  // b vert
	pn _parallel(1,1,2,5,2,1,3,5)  // both slope, parallel
	setsegment(sega,20,20,60,00)
	setsegment(segb,20,50,60,30)
	pn parallel(sega,segb)  // parallel and slope
	segb(3) = segb(3)-1
	pn parallel(sega,segb)  // not by one pixel
	pl"SHOULD GET    1 0 0 1 0 0 1 1 0"
	pl"reverseseg test"
	pl"";psegment sega
	reverseg sega
	pl"";psegment sega
]

// y TESTS FOR bisectseg (test, seed, and main fcns)
ytest int sega(3),segb(3) [
	int bsect(1), icntr(1), prll
	pl"segs a:"; psegment sega
	ps" b:"; psegment segb
	prll=bisectseg bsect, icntr, sega, segb
	if(prll)pl"parallel segs"
	pl"        bsect "; ppoint bsect

	start "bisect_test", 1000,1000
	moveto sega(0),sega(1)
	lineto sega(2),sega(3)
	moveto segb(0),segb(1)
	lineto segb(2),segb(3)
	next
	arc bsect(0),bsect(1),5,0,360
	stroke
	moveto icntr(0), icntr(1)
	setdash2 5,3,5
	lineto bsect(0),bsect(1)
	show
]
yseed int a,b,c,d, e,f,g,h[
	int sega(3), segb(3)
	setsegment sega, a,b,c,d
	setsegment segb, e,f,g,h
	ytest sega, segb
]
ymain [
	yseed 10,100,10,20, 20,10,100,10
	pl"    SHOULD BE ";ps"[ 260 260]"
	yseed 50,50,100,100, 10,50,10,100
	pl"    SHOULD BE ";ps"[ 187 437]"
	yseed 110,130,140,110, 140,110,150,130
	pl"    SHOULD BE ";ps"[ 51 483]"
]

// z TESTS FOR point bisect (main and test, no seed)
zmain[
	factor = 1
	ztest 100,400,100,100,400,100
	pl"SHOULD BE [ 350 350]"
	ztest 100,400,250,100,400,400
	pl"SHOULD BE [ 250 548]"
	ztest 200,100,500,250,200,400
	pl"SHOULD BE [ 52 250]"
	ztest 100,100,250,500,400,100
	pl"SHOULD BE [ 250 32]"
	ztest 400,100,100,400,500,150
	pl"SHOULD BE [ 489 90]"
	ztest 100,400,100,100,400,100
	pl"SHOULD BE [ 350 350]"
]
int factor
// c,d is the angle point
ztest int a,b,c,d,e,f [
	int bsect(1), segbisect(3)
	start "pt_bisect", 1000, 600
	pl"points, begin,mid,end "; pn a; pn b; pn c; pn d; pn e; pn f
	bisect bsect,a,b,c,d,e,f
	pl"    bsect ";ppoint bsect
	moveto a,b; lineto c,d; lineto e,f
	stroke
		// w test cases: extend the bisect line by big factor
	setsegment segbisect, c,d,bsect(0),bsect(1)  //needs to be a seg
	pl "bisect line len before extending"
	pn seglen(segbisect)
	_extend bsect, segbisect, factor

	moveto c,d; 
	lineto bsect(0),bsect(1)
	arc bsect(0),bsect(1), 5, 0, 360  // the point

	setdash2 5,3,5       // the dashed bisect line
	show
]
// compute point ix that would extend seg's length by a factor,
// _extend int ix(1), seg(3), fac

// w TESTS FOR obtuse angles, uses  ztest
wmain [
	factor = 100
//	ztest 10,310, 160,157, 310,10
//	pl"   10,310, 160,157, 310,10   BAD"
	ztest 10,310, 210,158, 410,30
	pl"   10,310, 210,158, 410,30   VERY CLOSE"
//	ztest 10,310, 210,158, 410,20
//	pl"   10,310, 210,158, 410,20   BAD"
]

// TESTS EVERYTHING
main [ 
	wmain  // obtuse
//	xmain  // parallel, no pics
//	ymain  // 2 seg args
//	zmain  // 3 point args  << principle version
]
